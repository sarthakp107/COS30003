@page "/products"
@inject StoreCatalogue Catalogue
@inject Inventory Inventory
@inject UserSessionService SessionService
@inject IJSRuntime JSRuntime

<h2 class="text-center my-4">🛒 Browse Our Products</h2>

@if (products == null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p class="mt-3"><em>Loading products...</em></p>
    </div>
}
else
{
    <div class="container">
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var product in products)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm border-0">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@product.Name</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@product.Category</h6>
                            <p class="card-text flex-grow-1">@product.Description</p>
                            <p class="card-text fs-5 fw-bold text-primary">$@product.Price.ToString("F2")</p>
                            <p class="card-text">
                                @{
                                    var stockLevel = Inventory.GetStockLevel(product);
                                    var stockClass = stockLevel > 0 ? "text-success" : "text-danger";
                                    var stockText = stockLevel > 0 ? $"In Stock ({stockLevel})" : "Out of Stock";
                                }
                                <strong>Stock:</strong> <span class="@stockClass">@stockText</span>
                            </p>
                        </div>
                        <div class="card-footer bg-transparent border-0">
                            @if (SessionService.IsCustomer && stockLevel > 0)
                            {
                                <button class="btn btn-primary w-100" @onclick="() => AddProductToCart(product)">
                                    <i class="bi bi-cart-plus-fill me-2"></i>Add to Cart
                                </button>
                            }
                            else if (!SessionService.IsLoggedIn)
                            {
                                <button class="btn btn-outline-secondary w-100" disabled>
                                    <i class="bi bi-lock-fill me-2"></i>Login to Add
                                </button>
                            }
                            else if (SessionService.IsAdmin)
                            {
                                <button class="btn btn-danger w-100" @onclick="() => RemoveProduct(product)">
                                    <i class="bi bi-trash-fill me-2"></i>Remove
                                </button>
                            }
                            else if (stockLevel <= 0)
                            {
                                <button class="btn btn-outline-danger w-100" disabled>
                                    <i class="bi bi-x-circle-fill me-2"></i>Out of Stock
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<AWEElectronicsBlazorApp.Core.Models.Product>? products;

    protected override void OnInitialized()
    {
        products = Catalogue.GetAllProducts();
    }

    private async Task AddProductToCart(AWEElectronicsBlazorApp.Core.Models.Product product)
    {
        if (Inventory.CheckStock(product, 1))
        {
            SessionService.AddToCart(product, 1);
            await JSRuntime.InvokeVoidAsync("alert", $"{product.Name} has been added to your cart!");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Sorry, {product.Name} is out of stock!");
        }
    }

    private async Task RemoveProduct(AWEElectronicsBlazorApp.Core.Models.Product product)
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove {product.Name} from the store?");
        if (confirm)
        {
            Catalogue.RemoveProduct(product);
            products!.Remove(product);
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("alert", $"{product.Name} has been removed from the catalogue.");
        }
    }
}
